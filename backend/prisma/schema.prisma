// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(EMPLOYEE)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  staffProfile    StaffProfile?
  assignedTasks   Task[]        @relation("AssignedTasks")
  createdTasks    Task[]        @relation("CreatedTasks")
  leaveRequests   Leave[]
  attendanceRecords Attendance[]
  
  @@map("users")
}

model StaffProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  department  String?
  position    String?
  phoneNumber String?
  address     String?
  hireDate    DateTime?
  salary      Float?
  skills      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectAssignments ProjectAssignment[]
  
  @@map("staff_profiles")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(PLANNING)
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tasks       Task[]
  assignments ProjectAssignment[]
  
  @@map("projects")
}

model ProjectAssignment {
  id            String   @id @default(cuid())
  projectId     String
  staffProfileId String
  role          String?
  assignedAt    DateTime @default(now())

  // Relations
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  staffProfile  StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, staffProfileId])
  @@map("project_assignments")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Keys
  projectId   String?
  assignedToId String?
  createdById String

  // Relations
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedTo  User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdBy   User     @relation("CreatedTasks", fields: [createdById], references: [id])
  
  @@map("tasks")
}

model Leave {
  id          String   @id @default(cuid())
  userId      String
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String?
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("leaves")
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @db.Date
  checkIn   DateTime?
  checkOut  DateTime?
  status    AttendanceStatus @default(PRESENT)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("attendance")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeaveType {
  VACATION
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  BEREAVEMENT
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
}